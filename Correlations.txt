import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

def create_correlation_heatmap(data, figsize=(10, 8), cmap='coolwarm', annot=True):
    """
    Calculate correlations and create a heatmap visualization.
    
    Parameters:
    data (pandas.DataFrame): Input DataFrame containing the variables
    figsize (tuple): Figure size for the plot (width, height)
    cmap (str): Color map for the heatmap
    annot (bool): Whether to annotate cells with numerical value
    
    Returns:
    correlation_matrix: The correlation matrix as a pandas DataFrame
    """
    # Calculate the correlation matrix
    correlation_matrix = data.corr()
    
    # Create a mask for the upper triangle
    mask = np.triu(np.ones_like(correlation_matrix), k=1)
    
    # Set up the matplotlib figure
    plt.figure(figsize=figsize)
    
    # Create the heatmap
    sns.heatmap(
        correlation_matrix,
        annot=annot,  # Show the correlation values
        cmap=cmap,    # Color scheme
        mask=mask,    # Mask the upper triangle
        vmin=-1,      # Minimum correlation value
        vmax=1,       # Maximum correlation value
        center=0,     # Center the colormap at 0
        square=True,  # Make the plot square-shaped
        fmt='.2f',    # Format the numbers to 2 decimal places
        cbar_kws={'label': 'Correlation Coefficient'}
    )
    
    plt.title('Correlation Heatmap')
    plt.tight_layout()
    
    return correlation_matrix

# Example usage:
if __name__ == "__main__":
    # Create sample data
    np.random.seed(42)
    sample_data = pd.DataFrame({
        'A': np.random.normal(0, 1, 100),
        'B': np.random.normal(0, 1, 100),
        'C': np.random.normal(0, 1, 100),
        'D': np.random.normal(0, 1, 100)
    })
    
    # Calculate correlations and create heatmap
    correlations = create_correlation_heatmap(sample_data)
    
    # Display the correlation matrix
    print("\nCorrelation Matrix:")
    print(correlations)
    
    # Show the plot
    plt.show()