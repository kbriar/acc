import pandas as pd
import numpy as np

def create_regional_rollup(df):
    """
    Create regional rollup and rankings analysis
    """
    # Convert Week to datetime and extract month and year
    df['Week'] = pd.to_datetime(df['Week'])
    df['Month_Start'] = df['Week'].dt.to_period('M').dt.start_time  # First day of the month
    df['Year'] = df['Week'].dt.year
    
    # Create rollup
    rollup = df.groupby(['Region', 'Country', 'Month_Start', 'Year']).agg({
        'Driver': 'nunique',  # count unique drivers
        'Score': 'mean',      # average score
        'VID': 'nunique',     # count unique vehicles
        'System_on_Hours': 'sum',  # total hours
        'Quality_accuracy': 'mean', # average quality
        'Total_Incidents_Accidents': 'sum'  # total incidents
    }).reset_index()
    
    # Rename columns for clarity
    rollup.columns = ['Region', 'Country', 'Month_Start', 'Year', 
                     'Unique_Drivers', 'Avg_Score', 'Unique_Cars',
                     'Total_Hours', 'Avg_Quality', 'Total_Incidents']
    
    return rollup

def get_top_bottom_rankings(rollup):
    """
    Get top 5 and bottom 5 countries for each metric
    """
    metrics = {
        'Unique_Drivers': 'drivers',
        'Avg_Score': 'average score',
        'Unique_Cars': 'cars',
        'Total_Hours': 'hours',
        'Avg_Quality': 'quality accuracy',
        'Total_Incidents': 'incidents'
    }
    
    rankings = {}
    
    # Calculate country-level aggregates
    country_stats = rollup.groupby('Country').agg({
        'Unique_Drivers': 'mean',
        'Avg_Score': 'mean',
        'Unique_Cars': 'mean',
        'Total_Hours': 'mean',
        'Avg_Quality': 'mean',
        'Total_Incidents': 'sum'
    })
    
    for col, metric_name in metrics.items():
        # Sort values
        sorted_countries = country_stats.sort_values(col, ascending=False)
        
        # Get top and bottom 5
        top_5 = sorted_countries.head(5)[[col]]
        bottom_5 = sorted_countries.tail(5)[[col]]
        
        rankings[metric_name] = {
            'top_5': top_5,
            'bottom_5': bottom_5
        }
    
    return rankings

def print_rankings(rankings):
    """
    Print rankings in a formatted way
    """
    for metric, data in rankings.items():
        print(f"\n=== {metric.upper()} ===")
        
        print("\nTop 5 Countries:")
        print(data['top_5'].to_string())
        
        print("\nBottom 5 Countries:")
        print(data['bottom_5'].to_string())

# Main execution
def analyze_regional_data(df):
    """
    Main function to perform all analysis
    """
    # Create rollup
    print("Creating regional rollup...")
    rollup = create_regional_rollup(df)
    
    print("\nRollup sample (first few rows):")
    print(rollup.head())
    
    # Get and print rankings
    print("\nCalculating country rankings...")
    rankings = get_top_bottom_rankings(rollup)
    print_rankings(rankings)
    
    return rollup, rankings

# Example usage
if __name__ == "__main__":
    # Read your data
    # df = pd.read_excel("your_data.xlsx")  # Replace with your data loading method
    
    # Sample data structure based on your image
    data = {
        'Week': ['2024-01-22'] * 10,
        'Region': ['NA', 'NA', 'LATAM', 'LATAM', 'APAC', 'EMEA', 'APAC', 'APAC', 'APAC', 'NA'],
        'Country': ['US', 'US', 'AR', 'AR', 'AU', 'ZA', 'AU', 'JP', 'JP', 'US'],
        'Driver': ['driver1', 'driver2', 'driver3', 'driver4', 'driver5', 'driver6', 'driver7', 'driver8', 'driver9', 'driver10'],
        'Score': [55.0, 58.0, 61.0, 61.0, 66.0, 67.0, 72.5, 81.0, 81.0, 81.0],
        'VID': [13470, 18086, 13400, 13405, 36101, 20842, 36054, 30128, 30161, 18092],
        'System_on_Hours': [3.0, 0.0, 3.0, 0.0, 2.0, 6.0, 1.5, 6.0, 6.0, 0.0],
        'Quality_accuracy': [-10.0, -10.0, -10.0, -10.0, 10.0, -10.0, 10.0, 10.0, 10.0, 10.0],
        'Total_Incidents_Accidents': [1, 0, 2, 0, 1, 3, 0, 1, 0, 1]
    }
    
    df = pd.DataFrame(data)
    rollup, rankings = analyze_regional_data(df)
