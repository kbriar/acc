import pandas as pd
import numpy as np
from scipy import stats
import matplotlib.pyplot as plt
import seaborn as sns

def perform_outlier_analysis(df):
    """
    Comprehensive outlier analysis for regional car and accident data
    """
    # 1. Calculate key metrics for each region and country
    df['accident_rate'] = df['no_of_ops_liable_accidents'] / df['total_active_cars'] * 100
    
    analysis_results = {}
    
    # 2. Statistical outliers using Z-score
    def get_statistical_outliers(data, column, threshold=3):
        z_scores = np.abs(stats.zscore(data[column]))
        return data[z_scores > threshold]
    
    # 3. Analyze at both region and country levels
    for level in ['region', ['region', 'country']]:
        grouped = df.groupby(level).agg({
            'total_active_cars': ['sum', 'mean', 'std'],
            'no_of_ops_liable_accidents': ['sum', 'mean', 'std'],
            'accident_rate': ['mean', 'std'],
            'count': 'sum'
        })
        
        # Calculate outlier scores
        grouped['outlier_score'] = (
            stats.zscore(grouped[('accident_rate', 'mean')]) ** 2 +
            stats.zscore(grouped[('total_active_cars', 'mean')]) ** 2
        ) ** 0.5
        
        analysis_results[str(level)] = grouped
        
    # 4. Identify unusual patterns
    def find_patterns(df):
        patterns = {
            'high_accident_low_cars': df[
                (df['accident_rate'] > df['accident_rate'].mean() + df['accident_rate'].std()) &
                (df['total_active_cars'] < df['total_active_cars'].mean() - df['total_active_cars'].std())
            ],
            'low_accident_high_cars': df[
                (df['accident_rate'] < df['accident_rate'].mean() - df['accident_rate'].std()) &
                (df['total_active_cars'] > df['total_active_cars'].mean() + df['total_active_cars'].std())
            ],
            'rapid_growth': df[
                df['total_active_cars'].pct_change() > df['total_active_cars'].pct_change().mean() + 
                2 * df['total_active_cars'].pct_change().std()
            ]
        }
        return patterns
    
    # 5. Visualization functions
    def plot_outliers():
        fig, axes = plt.subplots(2, 2, figsize=(15, 15))
        
        # Scatter plot of cars vs accidents by region
        sns.scatterplot(
            data=df,
            x='total_active_cars',
            y='no_of_ops_liable_accidents',
            hue='region',
            ax=axes[0,0]
        )
        axes[0,0].set_title('Cars vs Accidents by Region')
        
        # Box plot of accident rates by region
        sns.boxplot(
            data=df,
            x='region',
            y='accident_rate',
            ax=axes[0,1]
        )
        axes[0,1].set_title('Accident Rate Distribution by Region')
        
        # Heatmap of outlier scores
        region_pivot = df.pivot_table(
            index='region',
            values=['accident_rate', 'total_active_cars'],
            aggfunc=['mean', 'std']
        )
        sns.heatmap(
            region_pivot,
            ax=axes[1,0],
            cmap='YlOrRd'
        )
        axes[1,0].set_title('Regional Metrics Heatmap')
        
        # Time series of accident rates if time data available
        if 'date' in df.columns:
            df.groupby(['date', 'region'])['accident_rate'].mean().unstack().plot(
                ax=axes[1,1]
            )
            axes[1,1].set_title('Accident Rate Trends Over Time')
        
        plt.tight_layout()
        return fig
    
    return {
        'analysis_results': analysis_results,
        'plot_function': plot_outliers,
        'pattern_finder': find_patterns
    }

# Example usage:
# analysis = perform_outlier_analysis(df)
# results = analysis['analysis_results']
# analysis['plot_function']()
# patterns = analysis['pattern_finder'](df)
