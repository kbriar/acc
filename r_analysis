import numpy as np
import pandas as pd
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error

def evaluate_model(y_train, y_train_pred, y_val, y_val_pred, y_test, y_test_pred, group_by=None):
    """
    Computes R², MAE, RMSE, and Count for Train, Validation, and Test sets.
    Allows grouping metrics based on given bins.
    
    Parameters:
    y_train (array-like): True values for training set
    y_train_pred (array-like): Predicted values for training set
    y_val (array-like): True values for validation set
    y_val_pred (array-like): Predicted values for validation set
    y_test (array-like): True values for test set
    y_test_pred (array-like): Predicted values for test set
    group_by (list, optional): Bins for grouping
    
    Returns:
    pd.DataFrame: Metrics summary
    """
    
    def compute_metrics(y_true, y_pred):
        """Helper function to compute metrics"""
        r2 = r2_score(y_true, y_pred)
        mae = mean_absolute_error(y_true, y_pred)
        rmse = np.sqrt(mean_squared_error(y_true, y_pred))
        count = len(y_true)
        return r2, mae, rmse, count

    # Compute overall metrics
    results = {
        "Set": ["Train", "Validation", "Test"],
        "R²": [],
        "MAE": [],
        "RMSE": [],
        "Count": []
    }
    
    for y_true, y_pred in [(y_train, y_train_pred), (y_val, y_val_pred), (y_test, y_test_pred)]:
        r2, mae, rmse, count = compute_metrics(y_true, y_pred)
        results["R²"].append(r2)
        results["MAE"].append(mae)
        results["RMSE"].append(rmse)
        results["Count"].append(count)

    df_results = pd.DataFrame(results)

    # Grouping if bins are provided
    if group_by:
        group_labels = ["0", "1-3", "3-7", "7-15", "15+"]
        bins = [-np.inf, 0, 3, 7, 15, np.inf]
        
        grouped_results = []
        
        for name, y_true, y_pred in zip(["Train", "Validation", "Test"], 
                                        [y_train, y_val, y_test], 
                                        [y_train_pred, y_val_pred, y_test_pred]):
            df = pd.DataFrame({"y_true": y_true, "y_pred": y_pred})
            df["Group"] = pd.cut(df["y_true"], bins=bins, labels=group_labels)
            
            grouped_metrics = df.groupby("Group").apply(lambda g: compute_metrics(g["y_true"], g["y_pred"]))
            grouped_metrics = grouped_metrics.apply(pd.Series, index=["R²", "MAE", "RMSE", "Count"])
            grouped_metrics["Set"] = name
            grouped_results.append(grouped_metrics)
        
        df_grouped = pd.concat(grouped_results).reset_index()
        df_grouped.rename(columns={"Group": "Bin"}, inplace=True)
        
        return df_results, df_grouped

    return df_results

# Example Usage:
# df_metrics, df_grouped = evaluate_model(y_train, y_train_pred, y_val, y_val_pred, y_test, y_test_pred, group_by=True)
# print(df_metrics)
# print(df_grouped)
